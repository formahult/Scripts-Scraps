#!/bin/python2
# Factor 3 large public modulus that have been chosen using an insecure method.
# the moduli were each generated by choosing a prime p and then searching for a NEARBY prime q.
# Completed as part of Dan Boneh's online cryptography class
import gmpy2
from binascii import unhexlify

#data
#The following modulus N is a products of two primes p and q where |p−q|<2N^1/4
N1 = 179769313486231590772930519078902473361797697894230657273430081157732675805505620686985379449212982959585501387537164015710139858647833778606925583497541085196591615128057575940752635007475935288710823649949940771895617054361149474865046711015101563940680527540071584560878577663743040086340742855278549092581
#The following modulus N is a products of two primes p and q where |p−q|<2^11N^1/4
N2 = 648455842808071669662824265346772278726343720706976263060439070378797308618081116462714015276061417569195587321840254520655424906719892428844841839353281972988531310511738648965962582821502504990264452100885281673303711142296421027840289307657458645233683357077834689715838646088239640236866252211790085787877
#The following modulus N is a products of two primes p and q where |3p−2q|<N^1/4
N3 = 720062263747350425279564435525583738338084451473999841826653057981916355690188337790423408664187663938485175264994017897083524079135686877441155132015188279331812309091996246361896836573643119174094961348524639707885238799396839230364676670221627018353299443241192173812729276147530748597302192751375739387929

challengeCiphertext = 22096451867410381776306561134883418017410069787892831071731839143676135600120538004282329650473509424343946219751512256465839967942889460764542040581564748988013734864120452325229320176487916666402997509188729971690526083222067771600019329260870009579993724077458967773697817571267229951148662959627934791540

#first factor
print "Factoring challenge #1"
A = gmpy2.isqrt(N1)+1
x = gmpy2.isqrt(A**2 - N1)
p1 = A - x
q1= A + x
print "q=" + str(q1)
print gmpy2.is_prime(q1)
print "p=" + str(p1)
print gmpy2.is_prime(p1)
print (p1*q1 == N1)
print "p<q=" + str(p1<q1)
#second factor
print "Factoring challenge #2"
A = gmpy2.isqrt(N2)+1
while A < N2:
	x = gmpy2.isqrt(A**2 - N2)
	p2 = A - x
	q2 = A + x
	if(p2*q2==N2):
		print "q=" + str(q2)
		print "p=" + str(p2)
		print "p<q=" + str(p2<q2)
		break
	A += 1
#third factor
print "Factoring challenge #3"
A = gmpy2.isqrt(24*N3)+1
x = gmpy2.isqrt(A**2 - N3)
p3 = A - x
q3 = A - x
print "q=" + str(q3)
print "p=" + str(p3)
print "=n:" + str(p3*q3==N3)
print "p<q=" + str(p3<q3)
#ciphertext challenge
print "ciphertext challenge"
p=p1
q=q1
e=65537
phi = N1-p-q+1
d  = gmpy2.invert(e,phi)
m = gmpy2.powmod(challengeCiphertext,d,N1)
print str(hex(m)).split('00')[1].decode('hex')
